// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package payload

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Meta
//  - XferPipe
//  - BodyCodec
//  - Body
type Payload struct {
  Meta []byte `thrift:"meta,1" db:"meta" json:"meta"`
  XferPipe []byte `thrift:"xferPipe,2" db:"xferPipe" json:"xferPipe"`
  BodyCodec int32 `thrift:"bodyCodec,3" db:"bodyCodec" json:"bodyCodec"`
  Body []byte `thrift:"body,4" db:"body" json:"body"`
}

func NewPayload() *Payload {
  return &Payload{}
}


func (p *Payload) GetMeta() []byte {
  return p.Meta
}

func (p *Payload) GetXferPipe() []byte {
  return p.XferPipe
}

func (p *Payload) GetBodyCodec() int32 {
  return p.BodyCodec
}

func (p *Payload) GetBody() []byte {
  return p.Body
}
func (p *Payload) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Payload)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Meta = v
}
  return nil
}

func (p *Payload)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.XferPipe = v
}
  return nil
}

func (p *Payload)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BodyCodec = v
}
  return nil
}

func (p *Payload)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *Payload) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("payload"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Payload) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("meta", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:meta: ", p), err) }
  if err := oprot.WriteBinary(p.Meta); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.meta (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:meta: ", p), err) }
  return err
}

func (p *Payload) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xferPipe", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xferPipe: ", p), err) }
  if err := oprot.WriteBinary(p.XferPipe); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.xferPipe (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xferPipe: ", p), err) }
  return err
}

func (p *Payload) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bodyCodec", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bodyCodec: ", p), err) }
  if err := oprot.WriteI32(int32(p.BodyCodec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bodyCodec (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bodyCodec: ", p), err) }
  return err
}

func (p *Payload) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:body: ", p), err) }
  if err := oprot.WriteBinary(p.Body); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:body: ", p), err) }
  return err
}

func (p *Payload) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Payload(%+v)", *p)
}

